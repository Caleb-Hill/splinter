#!/bin/bash
# Copyright 2018-2022 Cargill Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

ALPHA_PRIV="/config/keys/alpha.priv"
ALPHA_PUB="/config/keys/alpha.pub"
BETA_PRIV="/config/keys/beta.priv"

circuit_accept(){
  echo "--== accepting circuit proposal ==--"

  splinter circuit vote \
    --key /config/keys/beta.priv \
    --url http://splinterd-beta:8080 \
    $CIRCUIT_ID \
    --accept
}

circuit_propose() {
  CIRCUIT_ID=$(splinter circuit propose \
    --key $ALPHA_PRIV \
    --url http://splinterd-alpha:8080 \
    --node splinterd-alpha::tcps://splinterd-alpha:8044 \
    --node splinterd-beta::tcps://splinterd-beta:8044 \
    --service gsAA::splinterd-alpha \
    --service gsBB::splinterd-beta \
    --service-type *::scabbard \
    --management test \
    --service-arg *::admin_keys=$(cat $ALPHA_PUB) \
    --service-arg "*::version=2" \
    --service-peer-group gsAA,gsBB \
    --auth-type trust \
    --display-name test \
    | grep "Circuit:" |awk '{print $2}')

  echo "--== proposed circuit ==--"
  echo
}

circuit_wait(){
  end=$((SECONDS+10))
  while [ $SECONDS -lt $end ]; do
    splinter circuit list --url http://splinterd-beta:8080 --key $BETA_PRIV | grep -q $CIRCUIT_ID
    if [ $? -eq 0 ]; then
        echo "Found circuit $CIRCUIT_ID"
        return 0
    else
        sleep 1
    fi
  done
  echo "unable to find circuit after 10 seconds"
  exit 1
}

contract_upload(){
  echo "--== uploading command contract ==--"
  scabbard contract upload command:0.4.5 \
  --path /tmp \
  --key $ALPHA_PRIV \
  --url http://splinterd-alpha:8080 \
  --service-id $CIRCUIT_ID::gsAA
}

cr_create(){
  echo "--== creating contract registry ==--"
  scabbard cr create command \
    --owners $(cat $ALPHA_PUB) \
    --key $ALPHA_PRIV \
    --url http://splinterd-alpha:8080 \
    --service-id $CIRCUIT_ID::gsAA
}

namespace_create(){
  echo "--== creating namespace ==--"
  scabbard ns create 06abbc \
    --owners $(cat $ALPHA_PUB) \
    --key $ALPHA_PRIV \
    --url http://splinterd-alpha:8080 \
    --service-id $CIRCUIT_ID::gsAA
}


permissions_apply(){
  echo "--== applying permissions ==--"
  scabbard perm 06abbc command --read --write \
    --key $ALPHA_PRIV \
    --url http://splinterd-alpha:8080 \
    --service-id $CIRCUIT_ID::gsAA
}

proposal_wait(){
  end=$((SECONDS+10))
  while [ $SECONDS -lt $end ]; do
    splinter circuit proposals --url http://splinterd-beta:8080 --key $BETA_PRIV | grep -q $CIRCUIT_ID
    if [ $? -eq 0 ]; then
        echo "Found proposal $CIRCUIT_ID"
        return 0
    else
        sleep 1
    fi
  done
  echo "Unable to find proposal after 10 seconds"
  exit 1
}

curl https://sawtooth.hyperledger.org/scar/0.4.5/command_0.4.5.scar -o /tmp/command_0.4.5.scar

circuit_propose
proposal_wait
circuit_accept
sleep 5
circuit_wait
sleep 5
cr_create
contract_upload
namespace_create
permissions_apply
